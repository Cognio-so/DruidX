generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String      @id @default(cuid())
  name          String
  email         String
  role          String      @default("user")
  banned        Boolean     @default(false) // Admin plugin field
  banReason     String? // Admin plugin field
  banExpires    DateTime? // Admin plugin field
  emailVerified Boolean     @default(false)
  image         String?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  Gpt           Gpt[]
  assignedGpts  AssignGpt[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id @default(cuid())
  expiresAt      DateTime
  token          String
  impersonatedBy String? // Admin plugin field
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @default(cuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Gpt {
  id              String      @id @default(cuid())
  userId          String
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  name            String      @db.VarChar(100)
  description     String      @db.VarChar(500)
  model           ModelEnum
  instruction     String      @db.Text
  webBrowser      Boolean     @default(false)
  hybridRag       Boolean     @default(false)
  mcp             Boolean     @default(false)
  mcpSchema       Json?
  image           String
  knowledgeBase   String?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  assignedToUsers AssignGpt[]
}

model Invitation {
  id         String    @id @default(cuid())
  email      String
  name       String
  role       String
  message    String?
  token      String    @unique
  status     String    @default("pending")
  expiresAt  DateTime
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  acceptedAt DateTime?
  acceptedBy String?

  @@map("invitation")
}

model AssignGpt {
  id         String   @id @default(cuid())
  userId     String
  gptId      String
  assignedAt DateTime @default(now())
  assignedBy String // Admin who assigned the GPT
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  gpt        Gpt      @relation(fields: [gptId], references: [id], onDelete: Cascade)

  @@unique([userId, gptId])
  @@map("assign_gpt")
}

enum ModelEnum {
  gemini_2_5_flash
  gemini_2_5_pro
  gemini_2_5_flash_lite
  gpt_4_1
  gpt_5
  gpt_5_thinking_high
  gpt_5_mini
  gpt_5_nano
  gpt_4o
  claude_sonnet_4_5
  claude_opus_4_1
  claude_haiku_3_5
  grok_4_fast
  deepseek_v3_1
  meta_llama_3_3_70b
  kimi_k2_0905
}
