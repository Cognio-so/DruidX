generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  role          String    @default("user")  
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]

 @@unique([email])
  @@map("user")
  Gpt Gpt[]
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
  
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

model Gpt {
  id           String   @id @default(cuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name         String   @db.VarChar(100)
  description  String   @db.VarChar(500)
  model        ModelEnum
  instruction  String   @db.Text
  webBrowser   Boolean  @default(false)
  hybridRag    Boolean  @default(false) 
  mcp          Boolean  @default(false)
  mcpSchema    Json?    
  image        String   
  knowledgeBase String? 
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Invitation {
  id        String   @id @default(cuid())
  email     String
  name      String
  role      String
  message   String?
  token     String   @unique
  status    String   @default("pending") 
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  acceptedAt DateTime?
  acceptedBy String? 

  @@map("invitation")
}


enum ModelEnum {
  gpt_4o
  gpt_4
  gpt_5
}